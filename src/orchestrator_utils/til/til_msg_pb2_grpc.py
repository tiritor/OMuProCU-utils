# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ..til import til_msg_pb2 as til_dot_til__msg__pb2


class DeploymentCommunicatorStub(object):
    """-----------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/til.DeploymentCommunicator/Create',
                request_serializer=til_dot_til__msg__pb2.DeploymentRequest.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.DeploymentResponse.FromString,
                )
        self.Update = channel.unary_unary(
                '/til.DeploymentCommunicator/Update',
                request_serializer=til_dot_til__msg__pb2.DeploymentRequest.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.DeploymentResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/til.DeploymentCommunicator/Delete',
                request_serializer=til_dot_til__msg__pb2.DeploymentRequest.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.DeploymentResponse.FromString,
                )
        self.Cleanup = channel.unary_unary(
                '/til.DeploymentCommunicator/Cleanup',
                request_serializer=til_dot_til__msg__pb2.DeploymentRequest.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.DeploymentResponse.FromString,
                )
        self.RestartSchedulerLoop = channel.unary_unary(
                '/til.DeploymentCommunicator/RestartSchedulerLoop',
                request_serializer=til_dot_til__msg__pb2.DeploymentRequest.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.DeploymentResponse.FromString,
                )
        self.CheckHealth = channel.unary_unary(
                '/til.DeploymentCommunicator/CheckHealth',
                request_serializer=til_dot_til__msg__pb2.DeploymentRequest.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.DeploymentResponse.FromString,
                )
        self.GetDeploymentMonitorStatus = channel.unary_unary(
                '/til.DeploymentCommunicator/GetDeploymentMonitorStatus',
                request_serializer=til_dot_til__msg__pb2.DeploymentRequest.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.DeploymentResponse.FromString,
                )


class DeploymentCommunicatorServicer(object):
    """-----------

    """

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Cleanup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RestartSchedulerLoop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckHealth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDeploymentMonitorStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeploymentCommunicatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=til_dot_til__msg__pb2.DeploymentRequest.FromString,
                    response_serializer=til_dot_til__msg__pb2.DeploymentResponse.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=til_dot_til__msg__pb2.DeploymentRequest.FromString,
                    response_serializer=til_dot_til__msg__pb2.DeploymentResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=til_dot_til__msg__pb2.DeploymentRequest.FromString,
                    response_serializer=til_dot_til__msg__pb2.DeploymentResponse.SerializeToString,
            ),
            'Cleanup': grpc.unary_unary_rpc_method_handler(
                    servicer.Cleanup,
                    request_deserializer=til_dot_til__msg__pb2.DeploymentRequest.FromString,
                    response_serializer=til_dot_til__msg__pb2.DeploymentResponse.SerializeToString,
            ),
            'RestartSchedulerLoop': grpc.unary_unary_rpc_method_handler(
                    servicer.RestartSchedulerLoop,
                    request_deserializer=til_dot_til__msg__pb2.DeploymentRequest.FromString,
                    response_serializer=til_dot_til__msg__pb2.DeploymentResponse.SerializeToString,
            ),
            'CheckHealth': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckHealth,
                    request_deserializer=til_dot_til__msg__pb2.DeploymentRequest.FromString,
                    response_serializer=til_dot_til__msg__pb2.DeploymentResponse.SerializeToString,
            ),
            'GetDeploymentMonitorStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDeploymentMonitorStatus,
                    request_deserializer=til_dot_til__msg__pb2.DeploymentRequest.FromString,
                    response_serializer=til_dot_til__msg__pb2.DeploymentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'til.DeploymentCommunicator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DeploymentCommunicator(object):
    """-----------

    """

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.DeploymentCommunicator/Create',
            til_dot_til__msg__pb2.DeploymentRequest.SerializeToString,
            til_dot_til__msg__pb2.DeploymentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.DeploymentCommunicator/Update',
            til_dot_til__msg__pb2.DeploymentRequest.SerializeToString,
            til_dot_til__msg__pb2.DeploymentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.DeploymentCommunicator/Delete',
            til_dot_til__msg__pb2.DeploymentRequest.SerializeToString,
            til_dot_til__msg__pb2.DeploymentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Cleanup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.DeploymentCommunicator/Cleanup',
            til_dot_til__msg__pb2.DeploymentRequest.SerializeToString,
            til_dot_til__msg__pb2.DeploymentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RestartSchedulerLoop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.DeploymentCommunicator/RestartSchedulerLoop',
            til_dot_til__msg__pb2.DeploymentRequest.SerializeToString,
            til_dot_til__msg__pb2.DeploymentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckHealth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.DeploymentCommunicator/CheckHealth',
            til_dot_til__msg__pb2.DeploymentRequest.SerializeToString,
            til_dot_til__msg__pb2.DeploymentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDeploymentMonitorStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.DeploymentCommunicator/GetDeploymentMonitorStatus',
            til_dot_til__msg__pb2.DeploymentRequest.SerializeToString,
            til_dot_til__msg__pb2.DeploymentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TILCommunicatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTIL = channel.unary_unary(
                '/til.TILCommunicator/CreateTIL',
                request_serializer=til_dot_til__msg__pb2.TILRequest.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.TILReply.FromString,
                )
        self.UpdateTIL = channel.unary_unary(
                '/til.TILCommunicator/UpdateTIL',
                request_serializer=til_dot_til__msg__pb2.TILRequest.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.TILReply.FromString,
                )
        self.DeleteTIL = channel.unary_unary(
                '/til.TILCommunicator/DeleteTIL',
                request_serializer=til_dot_til__msg__pb2.TILRequest.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.TILReply.FromString,
                )
        self.GetTIL = channel.unary_unary(
                '/til.TILCommunicator/GetTIL',
                request_serializer=til_dot_til__msg__pb2.TILRequest.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.TILReply.FromString,
                )
        self.ListTIL = channel.unary_unary(
                '/til.TILCommunicator/ListTIL',
                request_serializer=til_dot_til__msg__pb2.TILRequest.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.TILReply.FromString,
                )


class TILCommunicatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateTIL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTIL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTIL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTIL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTIL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TILCommunicatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateTIL': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTIL,
                    request_deserializer=til_dot_til__msg__pb2.TILRequest.FromString,
                    response_serializer=til_dot_til__msg__pb2.TILReply.SerializeToString,
            ),
            'UpdateTIL': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTIL,
                    request_deserializer=til_dot_til__msg__pb2.TILRequest.FromString,
                    response_serializer=til_dot_til__msg__pb2.TILReply.SerializeToString,
            ),
            'DeleteTIL': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTIL,
                    request_deserializer=til_dot_til__msg__pb2.TILRequest.FromString,
                    response_serializer=til_dot_til__msg__pb2.TILReply.SerializeToString,
            ),
            'GetTIL': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTIL,
                    request_deserializer=til_dot_til__msg__pb2.TILRequest.FromString,
                    response_serializer=til_dot_til__msg__pb2.TILReply.SerializeToString,
            ),
            'ListTIL': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTIL,
                    request_deserializer=til_dot_til__msg__pb2.TILRequest.FromString,
                    response_serializer=til_dot_til__msg__pb2.TILReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'til.TILCommunicator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TILCommunicator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateTIL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.TILCommunicator/CreateTIL',
            til_dot_til__msg__pb2.TILRequest.SerializeToString,
            til_dot_til__msg__pb2.TILReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTIL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.TILCommunicator/UpdateTIL',
            til_dot_til__msg__pb2.TILRequest.SerializeToString,
            til_dot_til__msg__pb2.TILReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTIL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.TILCommunicator/DeleteTIL',
            til_dot_til__msg__pb2.TILRequest.SerializeToString,
            til_dot_til__msg__pb2.TILReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTIL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.TILCommunicator/GetTIL',
            til_dot_til__msg__pb2.TILRequest.SerializeToString,
            til_dot_til__msg__pb2.TILReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTIL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.TILCommunicator/ListTIL',
            til_dot_til__msg__pb2.TILRequest.SerializeToString,
            til_dot_til__msg__pb2.TILReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CCCommunicatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCountermeasureConfig = channel.unary_unary(
                '/til.CCCommunicator/GetCountermeasureConfig',
                request_serializer=til_dot_til__msg__pb2.CountermeasureControlRequest.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.CountermeasureControlResponse.FromString,
                )
        self.ListCountermeasureConfig = channel.unary_unary(
                '/til.CCCommunicator/ListCountermeasureConfig',
                request_serializer=til_dot_til__msg__pb2.Empty.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.CountermeasureControlResponse.FromString,
                )
        self.UpdateCountermeasureConfig = channel.unary_unary(
                '/til.CCCommunicator/UpdateCountermeasureConfig',
                request_serializer=til_dot_til__msg__pb2.CountermeasureControlRequest.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.CountermeasureControlResponse.FromString,
                )
        self.DeleteCountermeasureConfig = channel.unary_unary(
                '/til.CCCommunicator/DeleteCountermeasureConfig',
                request_serializer=til_dot_til__msg__pb2.CountermeasureControlRequest.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.CountermeasureControlResponse.FromString,
                )
        self.CreateCountermeasureConfig = channel.unary_unary(
                '/til.CCCommunicator/CreateCountermeasureConfig',
                request_serializer=til_dot_til__msg__pb2.CountermeasureControlRequest.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.CountermeasureControlResponse.FromString,
                )


class CCCommunicatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCountermeasureConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCountermeasureConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCountermeasureConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCountermeasureConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCountermeasureConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CCCommunicatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCountermeasureConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCountermeasureConfig,
                    request_deserializer=til_dot_til__msg__pb2.CountermeasureControlRequest.FromString,
                    response_serializer=til_dot_til__msg__pb2.CountermeasureControlResponse.SerializeToString,
            ),
            'ListCountermeasureConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCountermeasureConfig,
                    request_deserializer=til_dot_til__msg__pb2.Empty.FromString,
                    response_serializer=til_dot_til__msg__pb2.CountermeasureControlResponse.SerializeToString,
            ),
            'UpdateCountermeasureConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCountermeasureConfig,
                    request_deserializer=til_dot_til__msg__pb2.CountermeasureControlRequest.FromString,
                    response_serializer=til_dot_til__msg__pb2.CountermeasureControlResponse.SerializeToString,
            ),
            'DeleteCountermeasureConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCountermeasureConfig,
                    request_deserializer=til_dot_til__msg__pb2.CountermeasureControlRequest.FromString,
                    response_serializer=til_dot_til__msg__pb2.CountermeasureControlResponse.SerializeToString,
            ),
            'CreateCountermeasureConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCountermeasureConfig,
                    request_deserializer=til_dot_til__msg__pb2.CountermeasureControlRequest.FromString,
                    response_serializer=til_dot_til__msg__pb2.CountermeasureControlResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'til.CCCommunicator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CCCommunicator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCountermeasureConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.CCCommunicator/GetCountermeasureConfig',
            til_dot_til__msg__pb2.CountermeasureControlRequest.SerializeToString,
            til_dot_til__msg__pb2.CountermeasureControlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListCountermeasureConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.CCCommunicator/ListCountermeasureConfig',
            til_dot_til__msg__pb2.Empty.SerializeToString,
            til_dot_til__msg__pb2.CountermeasureControlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateCountermeasureConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.CCCommunicator/UpdateCountermeasureConfig',
            til_dot_til__msg__pb2.CountermeasureControlRequest.SerializeToString,
            til_dot_til__msg__pb2.CountermeasureControlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteCountermeasureConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.CCCommunicator/DeleteCountermeasureConfig',
            til_dot_til__msg__pb2.CountermeasureControlRequest.SerializeToString,
            til_dot_til__msg__pb2.CountermeasureControlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateCountermeasureConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.CCCommunicator/CreateCountermeasureConfig',
            til_dot_til__msg__pb2.CountermeasureControlRequest.SerializeToString,
            til_dot_til__msg__pb2.CountermeasureControlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TCCommunicatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTenantConfig = channel.unary_unary(
                '/til.TCCommunicator/CreateTenantConfig',
                request_serializer=til_dot_til__msg__pb2.TenantConfigRequest.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.TenantConfigResponse.FromString,
                )
        self.DeleteTenantConfig = channel.unary_unary(
                '/til.TCCommunicator/DeleteTenantConfig',
                request_serializer=til_dot_til__msg__pb2.TenantConfigRequest.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.TenantConfigResponse.FromString,
                )
        self.UpdateTenantConfig = channel.unary_unary(
                '/til.TCCommunicator/UpdateTenantConfig',
                request_serializer=til_dot_til__msg__pb2.TenantConfigRequest.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.TenantConfigResponse.FromString,
                )
        self.GetTenantConfig = channel.unary_unary(
                '/til.TCCommunicator/GetTenantConfig',
                request_serializer=til_dot_til__msg__pb2.TenantConfigRequest.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.TenantConfigResponse.FromString,
                )
        self.ListTenantConfigs = channel.unary_unary(
                '/til.TCCommunicator/ListTenantConfigs',
                request_serializer=til_dot_til__msg__pb2.TenantConfigRequest.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.TenantConfigResponse.FromString,
                )
        self.GetRuntimeRules = channel.unary_unary(
                '/til.TCCommunicator/GetRuntimeRules',
                request_serializer=til_dot_til__msg__pb2.TenantConfigRequest.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.TenantConfigResponse.FromString,
                )
        self.UpdateRuntimeRules = channel.unary_unary(
                '/til.TCCommunicator/UpdateRuntimeRules',
                request_serializer=til_dot_til__msg__pb2.TenantConfigRequest.SerializeToString,
                response_deserializer=til_dot_til__msg__pb2.TenantConfigResponse.FromString,
                )


class TCCommunicatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateTenantConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTenantConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTenantConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTenantConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTenantConfigs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRuntimeRules(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRuntimeRules(self, request, context):
        """rpc ListRuntimeRules (TenantConfigRequest) returns (TenantConfigResponse);
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TCCommunicatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateTenantConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTenantConfig,
                    request_deserializer=til_dot_til__msg__pb2.TenantConfigRequest.FromString,
                    response_serializer=til_dot_til__msg__pb2.TenantConfigResponse.SerializeToString,
            ),
            'DeleteTenantConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTenantConfig,
                    request_deserializer=til_dot_til__msg__pb2.TenantConfigRequest.FromString,
                    response_serializer=til_dot_til__msg__pb2.TenantConfigResponse.SerializeToString,
            ),
            'UpdateTenantConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTenantConfig,
                    request_deserializer=til_dot_til__msg__pb2.TenantConfigRequest.FromString,
                    response_serializer=til_dot_til__msg__pb2.TenantConfigResponse.SerializeToString,
            ),
            'GetTenantConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTenantConfig,
                    request_deserializer=til_dot_til__msg__pb2.TenantConfigRequest.FromString,
                    response_serializer=til_dot_til__msg__pb2.TenantConfigResponse.SerializeToString,
            ),
            'ListTenantConfigs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTenantConfigs,
                    request_deserializer=til_dot_til__msg__pb2.TenantConfigRequest.FromString,
                    response_serializer=til_dot_til__msg__pb2.TenantConfigResponse.SerializeToString,
            ),
            'GetRuntimeRules': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRuntimeRules,
                    request_deserializer=til_dot_til__msg__pb2.TenantConfigRequest.FromString,
                    response_serializer=til_dot_til__msg__pb2.TenantConfigResponse.SerializeToString,
            ),
            'UpdateRuntimeRules': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRuntimeRules,
                    request_deserializer=til_dot_til__msg__pb2.TenantConfigRequest.FromString,
                    response_serializer=til_dot_til__msg__pb2.TenantConfigResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'til.TCCommunicator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TCCommunicator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateTenantConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.TCCommunicator/CreateTenantConfig',
            til_dot_til__msg__pb2.TenantConfigRequest.SerializeToString,
            til_dot_til__msg__pb2.TenantConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTenantConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.TCCommunicator/DeleteTenantConfig',
            til_dot_til__msg__pb2.TenantConfigRequest.SerializeToString,
            til_dot_til__msg__pb2.TenantConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTenantConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.TCCommunicator/UpdateTenantConfig',
            til_dot_til__msg__pb2.TenantConfigRequest.SerializeToString,
            til_dot_til__msg__pb2.TenantConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTenantConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.TCCommunicator/GetTenantConfig',
            til_dot_til__msg__pb2.TenantConfigRequest.SerializeToString,
            til_dot_til__msg__pb2.TenantConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTenantConfigs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.TCCommunicator/ListTenantConfigs',
            til_dot_til__msg__pb2.TenantConfigRequest.SerializeToString,
            til_dot_til__msg__pb2.TenantConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRuntimeRules(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.TCCommunicator/GetRuntimeRules',
            til_dot_til__msg__pb2.TenantConfigRequest.SerializeToString,
            til_dot_til__msg__pb2.TenantConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateRuntimeRules(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.TCCommunicator/UpdateRuntimeRules',
            til_dot_til__msg__pb2.TenantConfigRequest.SerializeToString,
            til_dot_til__msg__pb2.TenantConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
