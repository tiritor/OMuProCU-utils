# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ..til import time_measurement_pb2 as til_dot_time__measurement__pb2


class TimeMeasurementCommunicatorStub(object):
    """-----------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTimeMeasurementForMultipleTenants = channel.unary_stream(
                '/til.TimeMeasurementCommunicator/GetTimeMeasurementForMultipleTenants',
                request_serializer=til_dot_time__measurement__pb2.TimeMeasurementRequest.SerializeToString,
                response_deserializer=til_dot_time__measurement__pb2.TimeMeasurementResponse.FromString,
                )
        self.GetStreamedTimeMeasurementForMultipleTenants = channel.stream_stream(
                '/til.TimeMeasurementCommunicator/GetStreamedTimeMeasurementForMultipleTenants',
                request_serializer=til_dot_time__measurement__pb2.TimeMeasurementRequest.SerializeToString,
                response_deserializer=til_dot_time__measurement__pb2.TimeMeasurementResponse.FromString,
                )
        self.GetStreamedTimeMeasurementForTenant = channel.unary_stream(
                '/til.TimeMeasurementCommunicator/GetStreamedTimeMeasurementForTenant',
                request_serializer=til_dot_time__measurement__pb2.TimeMeasurementRequest.SerializeToString,
                response_deserializer=til_dot_time__measurement__pb2.TimeMeasurementResponse.FromString,
                )
        self.RemoveTimeMeasurementFromTenant = channel.unary_unary(
                '/til.TimeMeasurementCommunicator/RemoveTimeMeasurementFromTenant',
                request_serializer=til_dot_time__measurement__pb2.TimeMeasurementRequest.SerializeToString,
                response_deserializer=til_dot_time__measurement__pb2.TimeMeasurementResponse.FromString,
                )


class TimeMeasurementCommunicatorServicer(object):
    """-----------

    """

    def GetTimeMeasurementForMultipleTenants(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStreamedTimeMeasurementForMultipleTenants(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStreamedTimeMeasurementForTenant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveTimeMeasurementFromTenant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TimeMeasurementCommunicatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTimeMeasurementForMultipleTenants': grpc.unary_stream_rpc_method_handler(
                    servicer.GetTimeMeasurementForMultipleTenants,
                    request_deserializer=til_dot_time__measurement__pb2.TimeMeasurementRequest.FromString,
                    response_serializer=til_dot_time__measurement__pb2.TimeMeasurementResponse.SerializeToString,
            ),
            'GetStreamedTimeMeasurementForMultipleTenants': grpc.stream_stream_rpc_method_handler(
                    servicer.GetStreamedTimeMeasurementForMultipleTenants,
                    request_deserializer=til_dot_time__measurement__pb2.TimeMeasurementRequest.FromString,
                    response_serializer=til_dot_time__measurement__pb2.TimeMeasurementResponse.SerializeToString,
            ),
            'GetStreamedTimeMeasurementForTenant': grpc.unary_stream_rpc_method_handler(
                    servicer.GetStreamedTimeMeasurementForTenant,
                    request_deserializer=til_dot_time__measurement__pb2.TimeMeasurementRequest.FromString,
                    response_serializer=til_dot_time__measurement__pb2.TimeMeasurementResponse.SerializeToString,
            ),
            'RemoveTimeMeasurementFromTenant': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveTimeMeasurementFromTenant,
                    request_deserializer=til_dot_time__measurement__pb2.TimeMeasurementRequest.FromString,
                    response_serializer=til_dot_time__measurement__pb2.TimeMeasurementResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'til.TimeMeasurementCommunicator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TimeMeasurementCommunicator(object):
    """-----------

    """

    @staticmethod
    def GetTimeMeasurementForMultipleTenants(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/til.TimeMeasurementCommunicator/GetTimeMeasurementForMultipleTenants',
            til_dot_time__measurement__pb2.TimeMeasurementRequest.SerializeToString,
            til_dot_time__measurement__pb2.TimeMeasurementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStreamedTimeMeasurementForMultipleTenants(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/til.TimeMeasurementCommunicator/GetStreamedTimeMeasurementForMultipleTenants',
            til_dot_time__measurement__pb2.TimeMeasurementRequest.SerializeToString,
            til_dot_time__measurement__pb2.TimeMeasurementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStreamedTimeMeasurementForTenant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/til.TimeMeasurementCommunicator/GetStreamedTimeMeasurementForTenant',
            til_dot_time__measurement__pb2.TimeMeasurementRequest.SerializeToString,
            til_dot_time__measurement__pb2.TimeMeasurementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveTimeMeasurementFromTenant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/til.TimeMeasurementCommunicator/RemoveTimeMeasurementFromTenant',
            til_dot_time__measurement__pb2.TimeMeasurementRequest.SerializeToString,
            til_dot_time__measurement__pb2.TimeMeasurementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
