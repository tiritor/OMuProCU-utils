
syntax = "proto3";

package til;

import "til/til_msg.proto";
import "til/tif_control.proto";
import "til/orchestrator_msg.proto";

enum OrchestratorHealthState {
    ORCHESTRATOR_HEALTH_STATE_UNSPECIFIED = 0;
    ORCHESTRATOR_HEALTH_STATE_OFFLINE = 1;
    ORCHESTRATOR_HEALTH_STATE_RUNNING = 2;
    ORCHESTRATOR_HEALTH_STATE_DISABLED = 3;
    ORCHESTRATOR_HEALTH_STATE_UNKNOWN = 4;
}

service MDDeploymentCommunicator {
    rpc Create(MDDeploymentRequest) returns (MDDeploymentResponse);
    rpc Update(MDDeploymentRequest) returns (MDDeploymentResponse);
    rpc Delete(MDDeploymentRequest) returns (MDDeploymentResponse);
    rpc Cleanup(MDDeploymentRequest) returns (MDDeploymentResponse);
    rpc CheckHealth(MDDeploymentRequest) returns (MDDeploymentResponse);
}

service TopologyUpdateCommunicator {
    rpc UpdateHealthStatus(TopologyUpdateRequest) returns (TopologyUpdateResponse);
    rpc GetHealthStatus(TopologyUpdateRequest) returns (TopologyUpdateResponse);
    rpc UpdateNode(TopologyUpdateRequest) returns (TopologyUpdateResponse);
    rpc GetNodes(TopologyUpdateRequest) returns (TopologyUpdateResponse);
    rpc GetEdgeNodes(TopologyUpdateRequest) returns (TopologyUpdateResponse);
    rpc GetDatacenterNodes(TopologyUpdateRequest) returns (TopologyUpdateResponse);
    rpc GetEndpointNodes(TopologyUpdateRequest) returns (TopologyUpdateResponse);
    rpc GetAllDeviceNodes(TopologyUpdateRequest) returns (TopologyUpdateResponse);
    rpc GetDeviceNode(TopologyUpdateRequest) returns (TopologyUpdateResponse);
    rpc SetDeviceNodeStatus(TopologyUpdateRequest) returns (TopologyUpdateResponse);
    rpc GetDeviceNodeStatus(TopologyUpdateRequest) returns (TopologyUpdateResponse);
    rpc GetDeviceNodeDeploymentStatus(TopologyUpdateRequest) returns (TopologyUpdateResponse);
    rpc SetDeviceNodeDeploymentStatus(TopologyUpdateRequest) returns (TopologyUpdateResponse); 
    rpc SetDeviceNodeMDDeploymentStatus(TopologyUpdateRequest) returns (TopologyUpdateResponse); 
    rpc GetDeviceNodeMDDeploymentStatus(TopologyUpdateRequest) returns (TopologyUpdateResponse);
    // rpc ChangeEdgeConnectionState (TopologyUpdateRequest) returns (TopologyUpdateResponse);
    // rpc AddLAGConfiguration (TopologyUpdateRequest) returns (TopologyUpdateResponse);
    // rpc ChangeLAGMemberState (TopologyUpdateRequest) returns (TopologyUpdateResponse);
    // remove lag configuration
    // NextHop Map
    // ipv4 host entries
    // arp table host entries
}

service MDRulesUpdaterCommunicator {
    rpc GetRules(MDRulesUpdateRequest) returns (MDRulesUpdateResponse);
    rpc GetRule(MDRulesUpdateRequest) returns (MDRulesUpdateResponse);
    rpc CreateRule(MDRulesUpdateRequest) returns (MDRulesUpdateResponse);
    rpc UpdateRule(MDRulesUpdateRequest) returns (MDRulesUpdateResponse);
    rpc DeleteRule(MDRulesUpdateRequest) returns (MDRulesUpdateResponse);
    rpc CleanupRules(MDRulesUpdateRequest) returns (MDRulesUpdateResponse);
    rpc CheckHealth(MDRulesUpdateRequest) returns (MDRulesUpdateResponse);

}

message MDRulesUpdateRequest {
    repeated string infrastructureDeviceNames = 1;
    repeated TIFControlRequest tifControlRequests = 2;
}

message MDRulesUpdateResponse {
    uint32 status = 1;
    string message = 2;
    repeated string infrastructureDeviceNames = 3;
    repeated TIFControlResponse tifControlResponse = 4;
}

message MDDeploymentMessage {
    string infrastructureDeviceNames = 1;
    string infrastructure_device_category = 2;
    DeploymentMessage deploymentMessage = 3;
}

message MDDeploymentRequest {
    TenantMetadata tenantMetadata = 1;
    repeated MDDeploymentMessage mdDeploymentMessage = 2;
    string mdtdc_raw = 3;
}

message MDDeploymentResponse {
    uint32 status = 1;
    string message = 2;
}

message Edge {
    uint32 srcPort = 1;
    uint32 destPort = 2;
    uint32 srcDpPort = 3;
    uint32 destDpPort = 4;
    float weight = 5;
    bool enabled = 6;
    string destDevice = 7;
}

message Node {
    string nodeName = 1;
    OrchestratorHealthState orchestratorHealthState = 2;
    string category = 3;
    string OMuProCUAddress = 4;
    bool OMuProCUEnabled = 5;
    repeated Edge edges = 6;
    repeated Lag lagGroups = 7;
    repeated RoutingTableConfiguration nexthopMapEntries = 8;
    repeated RoutingTableConfiguration ipv4HostEntries = 9;
    repeated RoutingTableConfiguration arpHostEntries = 10;
    repeated TenantMetadata deployments = 11;
}

message TopologyUpdate {
    repeated Node nodes = 1;
}

message DeploymentNodeUpdate {
    repeated TenantMetadata tenantMetadatas = 1;
    Node node = 2;
    DeploymentStatus deploymentStatus = 3;
    DeploymentStatus mdDeploymentStatus = 4;
}

message TopologyUpdateRequest {
    TopologyUpdate topologyUpdate = 1;
    repeated DeploymentNodeUpdate deploymentNodeUpdates = 2;
}

message TopologyUpdateResponse {
    uint32 status = 1;
    string message = 2;
    TopologyUpdate topologyUpdate = 3;
    repeated DeploymentNodeUpdate deploymentNodeUpdates = 4;
}